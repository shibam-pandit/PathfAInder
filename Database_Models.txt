CREATE TABLE industry_insights (
    id SERIAL PRIMARY KEY,
    industry VARCHAR(255) NOT NULL,
    salaryRanges JSON[],  -- Array of JSON objects
    growthRate FLOAT,
    demandLevel VARCHAR(100),
    topSkills TEXT[],  -- Array of strings
    marketOutLook TEXT,
    keyTrends TEXT[],  -- Array of strings
    recommendedSkills TEXT[],  -- Array of strings
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    nextUpdate TIMESTAMP
);

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    imageUrl TEXT,
    industry INT REFERENCES industry_insights(id),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    bio TEXT,
    experience INT,
    skills TEXT[],  -- Postgres array type
    CONSTRAINT chk_experience_non_negative CHECK (experience >= 0)
);

CREATE TABLE resume (
    id SERIAL PRIMARY KEY,
    userid INT UNIQUE REFERENCES users(id) ON DELETE CASCADE,
    formdata JSONB, -- store the entire form object here
    markdown TEXT,  -- store the markdown version of the resume here
    atsscore DECIMAL(5,2), -- assuming this is a number between 0.00 - 100.00
    feedback TEXT, -- for AI or human feedback
    createdat TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedat TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE coverletter (
    id SERIAL PRIMARY KEY,
    userid INT REFERENCES users(id) ON DELETE CASCADE,
    content TEXT,
    jobdescription TEXT,
    companyname VARCHAR(255),
    jobtitle VARCHAR(255),
    tone VARCHAR(50),
    createdat TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedat TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE assessment (
	id SERIAL PRIMARY KEY,
	userid INT REFERENCES users(id),
	quizscore FLOAT,
	questions JSONB[],
	category TEXT,
	improvementtip TEXT,
	createdat TIMESTAMP DEFAULT NOW(),
	updatedat TIMESTAMP DEFAULT NOW()
);